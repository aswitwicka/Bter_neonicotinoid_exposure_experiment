---
title: "R Notebook"
output: html_notebook
---
title: "Bombus pesticide exposure: gene expression in head"
output: GO_enrichment_visualisation.html
---

## Introduction 
# This script is for visualisation of the output of gene ontology (GO) analyses using the R package TopGo.
# This script creates a barchart of the number of significant genes annotated to a particular GO term, with an associated p-value.
# This script takes an input of .csv files containing an output table of GO analyses.

```{r}
# Load libraries; install from scratch if needed
libraries <- c("ggplot2", "lattice", "ggpubr")
for (lib in libraries) {
    if (require(package = lib, character.only = TRUE)) {
        print("Successful")
    } else {
        print("Installing")
        source("https://bioconductor.org/biocLite.R")
        biocLite(pkgs = lib)
        library(lib, character.only = TRUE )
    }
}
```

## Step One: Load input files
```{r}
### Worker GO analyses
worker_dexseq <- read.csv("input/dexseq/worker_clo.csv", header = TRUE)
worker_dexseq$Category <- factor(worker_dexseq$Category)

worker_deseq <- read.csv("input/deseq/worker_clo.csv", header = TRUE)
worker_deseq$Category <- factor(worker_deseq$Category)

# Set order of GO categories to plot and replace into full categories
levels(worker_dexseq$Category) <- c("Biological process", "Molecular function")
levels(worker_deseq$Category) <- c("Biological process", "Molecular function", "Cellular component")

# Round p values to plot
worker_dexseq$weight_ks <- round(worker_dexseq$weight_ks, digits = 3)
worker_deseq$weight_ks <- round(worker_deseq$weight_ks, digits = 3)

# Log p values for plotting 
worker_dexseq$weight_ks <- -log(worker_dexseq$weight_ks)
worker_deseq$weight_ks <- -log(worker_deseq$weight_ks)

### Queen GO analyses
queen <- read.csv("input/deseq/queen_clo.csv", header = TRUE)
queen$Category <- factor(queen$Category)

# Set order of GO categories to plot
levels(queen$Category) <- c("Biological process", "Molecular function", "Cellular component")

# Round p values to plot
queen$weight_ks <- round(queen$weight_ks, digits = 3)

# Log p-values for plotting
queen$weight_ks <- -log(queen$weight_ks)
```

## Step Two: Plot a barchart of GO terms and number of genes, for both worker and queen GO analyses, with significance values (ks tests)
```{r}
# Reorder terms for plotting 
worker_dexseq$Term <- factor(worker_dexseq$Term, levels = worker_dexseq$Term[order(worker_dexseq$Category, worker_dexseq$weight_ks)])
worker_deseq$Term <- factor(worker_deseq$Term, levels = worker_deseq$Term[order(worker_deseq$Category, worker_deseq$weight_ks)])
queen$Term <- factor(queen$Term, levels = queen$Term[order(queen$Category, queen$weight_ks)])

# Plot for workers
worker_deseq_plot <- ggbarplot(worker_deseq, x = "Term", y = "weight_ks", fill = "Category", color = "white",
              palette = "jco", ylab = "", xlab = "", width = 0.5, legend = "top") +
              font("y.text", size = 14) +
              font("x.text", size = 14) +
              font("x", size = 20, face = "bold") +
              font("y", size = 22, face = "bold") +
              font("legend.title", size = 20, face = "bold") +
              font("legend.text", size = 18) +
              scale_y_continuous(expand = c(0,0)) +
              geom_text(aes(label = Significant), hjust = -0.1, size = 4.5) +
              expand_limits(y = 6.5) +
              rotate() +
              theme(panel.spacing = unit(1.5, "lines"))

worker_dexseq_plot <- ggbarplot(worker_dexseq, x = "Term", y = "weight_ks", fill = "Category", color = "white",
              palette = "jco", ylab = "-log p-value", xlab = "", width = 0.5, legend = "none") +
              font("y.text", size = 14) +
              font("x.text", size = 14) +
              font("x", size = 20, face = "bold") +
              font("y", size = 22, face = "bold") +
              font("legend.title", size = 20, face = "bold") +
              font("legend.text", size = 18) +
              scale_y_continuous(expand = c(0,0)) +
              geom_text(aes(label = Significant), hjust = -0.1, size = 4.5) +
              expand_limits(y = 6.5) +
              rotate() +
              theme(panel.spacing = unit(1.5, "lines"))


# Plot for queens
queen_plot <- ggbarplot(queen, x = "Term", y = "weight_ks", fill = "Category", color = "white",
              palette = "jco", ylab = "", width = 0.5, legend = "none") +
              xlab("Term") +
              font("y.text", size = 14) +
              font("x.text", size = 14) +
              font("x", size = 20, face = "bold") +
              font("y", size = 22, face = "bold") +
              font("legend.title", size = 20, face = "bold") +
              font("legend.text", size = 18) +
              scale_y_continuous(expand = c(0,0)) +
              geom_text(aes(label = Significant), hjust = -0.1, size = 4.5) +
              expand_limits(y = 6.5) +
              rotate() +
              theme(panel.spacing = unit(1.5, "lines"))
```

## Step Three: Arrange into a single figure
```{r}
png("output/clothianidin_go.png", width = 12, height = 15, units = 'in', res = 500)

ggarrange(worker_deseq_plot, queen_plot, worker_dexseq_plot,
            nrow = 3, ncol = 1, common.legend = TRUE, legend = "top",
          labels = c("a", "b", "c"), font.label = list(size = 20), 
          align = "hv")

dev.off()

```

## Arrange into three separate figures for setting same bar width
```{r}
png("output/go_worker_deseq.png", width = 14, height = 7, units = 'in', res = 500)
worker_deseq_plot
dev.off()

png("output/go_worker_dexseq.png", width = 14, height = 7, units = 'in', res = 500)
worker_dexseq_plot
dev.off()

png("output/go_queen.png", width = 14, height = 7, units = 'in', res = 500)
queen_plot
dev.off()

```
















